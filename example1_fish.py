
stylize_prompt = '"realistic fished of different colors"'
seed = 54321

#SD API
import getpass, os

# NB: host url is not prepended with \"https\" nor does it have a trailing slash.
os.environ['STABILITY_HOST'] = 'grpc.stability.ai:443'

# To get your API key, visit https://beta.dreamstudio.ai/membership
os.environ['STABILITY_KEY'] = getpass.getpass('input your dreamstudio api:')

import io as sysio
import os
import warnings

from IPython.display import display
from PIL import Image
from stability_sdk import client
import stability_sdk.interfaces.gooseai.generation.generation_pb2 as generation


stability_api = client.StabilityInference(
    key=os.environ['STABILITY_KEY'], 
    verbose=True,
)

print('SD API loaded')


# P5 

from p5 import *

def setup():
    size(512, 512)
    no_stroke()
    # background(58)

def draw():
    if mouse_is_pressed:
        fill(random_uniform(255), random_uniform(127), random_uniform(51), 127)
    else:
        fill(255, 15)

    circle_size = random_uniform(low=10, high=80)

    circle((mouse_x, mouse_y), circle_size)

def key_pressed(event):
    save_canvas(filename = './current_screen.jpg')
    print('start to generate stagery results.....')


    initial_img = Image.open('./current_screen.jpg')
    print('current screen saved, now generating from SD')

    answers = stability_api.generate(
        prompt=stylize_prompt,
        init_image=initial_img,
        seed=seed, # if we're passing in an image generated by SD, you may get better results by providing a different seed value than was used to generate the image
        start_schedule=0.5, # this controls the "strength" of the prompt relative to the init image
    )

    # iterating over the generator produces the api response
    for resp in answers:
        for artifact in resp.artifacts:
            if artifact.finish_reason == generation.FILTER:
                warnings.warn(
                    "Your request activated the API's safety filters and could not be processed."
                    "Please modify the prompt and try again.")
            if artifact.type == generation.ARTIFACT_IMAGE:
                result_img = Image.open(sysio.BytesIO(artifact.binary))

    result_img.save('./generated_screen.jpg')

    background(load_image('./generated_screen.jpg'))

# p5 supports different backend to render sketches, viz "vispy" for both 2D and 3D sketches and "skia" for 2D sketches
# Default renderer is set to "vispy"
run(renderer="vispy")

